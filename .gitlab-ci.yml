# GitLab CI/CD Pipeline for Impulse BBS Automated Builds
# Builds on every commit to main branch
# Creates public artifacts with build numbers (build-1, build-2, etc.)

stages:
  - build

variables:
  DOCKER_DRIVER: overlay2

# Main build job - only runs on main branch
build_impulse:
  stage: build
  image: ubuntu:20.04
  only:
    - main
  before_script:
    - echo "üöÄ Building Impulse BBS - Pipeline $CI_PIPELINE_ID"
    - echo "üìù Commit $CI_COMMIT_SHORT_SHA by $CI_COMMIT_AUTHOR"
    - echo "üí¨ Message: $CI_COMMIT_MESSAGE"
    - echo "üì¶ Installing dependencies..."
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y dosbox xvfb curl
    - echo "üìÅ Creating build directories..."
    - mkdir -p /tmp/impulse_dosbox
    - mkdir -p build
    
  script:
    - echo "üì¶ Setting up Borland Pascal environment..."
    - cp -r BP /tmp/impulse_dosbox/bp
    - echo "‚öôÔ∏è Creating DOSBox configuration..."
      cat > dosbox.conf << EOF
      [sdl]
      windowresolution=800x600
      output=surface
      autolock=false
      
      [dosbox]
      machine=svga_s3
      memsize=16
      
      [cpu]
      core=auto
      cputype=auto
      cycles=10000
      
      [mixer]
      nosound=true
      
      [midi]
      mpu401=none
      
      [sblaster]
      sbtype=none
      
      [gus]
      gus=false
      
      [speaker]
      pcspeaker=false
      
      [autoexec]
      mount c: /tmp/impulse_dosbox
      mount d: $PWD/source
      mount e: $PWD/output
      mount f: $PWD/include
      d:
      set PATH=c:\\bp\\bin;%PATH%
      call c:\\build.bat
      exit
      EOF
    
    # Create DOS build script with proper error handling
    - |
      echo "üìù Creating DOS build script..."
      cat > /tmp/impulse_dosbox/build.bat << 'EOF'
      @echo off
      echo === Impulse BBS Compilation ===
      
      REM Check if Borland Pascal is available
      if exist c:\bp\bin\bpc.exe goto bpfound
      echo ERROR: Borland Pascal not found at c:\bp\bin\bpc.exe
      echo Looking for BP installation...
      if exist c:\bp dir c:\bp
      goto end
      
      :bpfound
      echo ‚úì Found Borland Pascal compiler
      
      REM Change to source directory and check for imp.pas
      d:
      if exist imp.pas goto impfound
      echo ERROR: imp.pas not found in source directory
      echo Source directory contents:
      dir
      goto end
      
      :impfound
      echo ‚úì Found imp.pas in source directory
      
      REM Step 1: Build with -$G+ -B flags
      echo.
      echo Step 1: Building with -$G+ -B flags...
      bpc -$G+ -B -Uf:\ -Ee:\ imp.pas
      if errorlevel 1 goto buildfail
      echo ‚úì Build step completed successfully
      goto step2
      
      :buildfail
      echo ERROR: Build step failed
      goto end
      
      :step2
      REM Step 2: Final compilation
      echo.
      echo Step 2: Final compilation...
      bpc -Uf:\ -Ee:\ imp.pas
      if errorlevel 1 goto compfail
      echo ‚úì Compilation completed successfully
      goto checkfiles
      
      :compfail
      echo ERROR: Final compilation failed
      goto end
      
      :checkfiles
      REM Verify output files were created
      e:
      if exist IMP.EXE echo ‚úì IMP.EXE created successfully
      if exist IMP.OVR echo ‚úì IMP.OVR created successfully
      goto end
      
      :end
      echo === Build process finished ===
      EOF
    
    # Run DOSBox compilation in headless mode
    - echo "üî® Starting headless DOSBox compilation..."
    - xvfb-run -a dosbox -conf dosbox.conf -noconsole
    
    # Check compilation results and create build artifacts
    - |
      echo "üîç Checking compilation results..."
      if [ -f "output/IMP.EXE" ] && [ -f "output/IMP.OVR" ]; then
        echo "‚úÖ Compilation successful!"
        
        # Create build directory with pipeline ID
        BUILD_DIR="build/build-$CI_PIPELINE_ID"
        mkdir -p "$BUILD_DIR"
        
        # Copy compiled files
        cp output/IMP.EXE "$BUILD_DIR/"
        cp output/IMP.OVR "$BUILD_DIR/"
        
        # Create build information file
        cat > "$BUILD_DIR/build-info.txt" << EOF
      Impulse BBS 7.1 Build Information
      ================================
      Build Date: $(date)
      Pipeline ID: $CI_PIPELINE_ID
      Job ID: $CI_JOB_ID
      Commit SHA: $CI_COMMIT_SHA
      Commit Short SHA: $CI_COMMIT_SHORT_SHA
      Commit Message: $CI_COMMIT_MESSAGE
      Commit Author: $CI_COMMIT_AUTHOR
      Branch: $CI_COMMIT_REF_NAME
      
      Files:
      EOF
        ls -la "$BUILD_DIR"/*.EXE "$BUILD_DIR"/*.OVR >> "$BUILD_DIR/build-info.txt"
        
        echo "üéâ Build complete!"
        ls -la "$BUILD_DIR/"
        
        # Output direct download links for easy access
        echo ""
        echo "üìÅ BUILD ARTIFACTS READY:"
        echo "Browse files: $CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/browse/build/build-$CI_PIPELINE_ID/"
        echo "Download ZIP: $CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/download"
        echo "Direct IMP.EXE: $CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/raw/build/build-$CI_PIPELINE_ID/IMP.EXE"
        echo "Direct IMP.OVR: $CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/raw/build/build-$CI_PIPELINE_ID/IMP.OVR"
        
        # Create/update latest build page if it exists
        if [ -f "latest-build.html" ]; then
          echo "üìÑ Creating latest build page..."
          sed -i "s/PIPELINE_ID_PLACEHOLDER/$CI_PIPELINE_ID/g" latest-build.html
          sed -i "s/JOB_ID_PLACEHOLDER/$CI_JOB_ID/g" latest-build.html
          sed -i "s/BUILD_DATE_PLACEHOLDER/$(date)/g" latest-build.html
          sed -i "s/COMMIT_SHA_PLACEHOLDER/$CI_COMMIT_SHORT_SHA/g" latest-build.html
          cp latest-build.html build/
          echo "üìÑ Latest build page: $CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/raw/build/latest-build.html"
        fi
        
        # Optional: Send enhanced Slack notification if webhook is configured
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          echo "üì± Sending Slack notification..."
          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"üéâ Impulse BBS Build #$CI_PIPELINE_ID Complete!\",
            \"attachments\": [
              {
                \"color\": \"good\",
                \"fields\": [
                  {
                    \"title\": \"üìÇ Browse Files\",
                    \"value\": \"<$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/browse/build/build-$CI_PIPELINE_ID/|View Online>\",
                    \"short\": true
                  },
                  {
                    \"title\": \"üì¶ Download\",
                    \"value\": \"<$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/download|Download ZIP>\",
                    \"short\": true
                  },
                  {
                    \"title\": \"üíæ Direct Files\",
                    \"value\": \"<$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/raw/build/build-$CI_PIPELINE_ID/IMP.EXE|IMP.EXE> | <$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/raw/build/build-$CI_PIPELINE_ID/IMP.OVR|IMP.OVR>\",
                    \"short\": false
                  }
                ],
                \"footer\": \"Commit: $CI_COMMIT_SHORT_SHA by $CI_COMMIT_AUTHOR\"
              }
            ]
          }" "$SLACK_WEBHOOK_URL" || echo "Slack notification failed (not critical)"
        fi
        
      else
        echo "‚ùå Compilation failed or output files not found"
        echo ""
        echo "üîç Output directory contents:"
        ls -la output/ || echo "No output directory found"
        echo ""
        echo "üîç DOSBox temp directory contents:"
        ls -la /tmp/impulse_dosbox/ || echo "No DOSBox temp directory found"
        exit 1
      fi
    
  # Configure artifacts for public download
  artifacts:
    name: "impulse-bbs-build-$CI_PIPELINE_ID"
    paths:
      - build/build-$CI_PIPELINE_ID/
      - build/latest-build.html
    expire_in: 1 year
    public: true
    when: always

